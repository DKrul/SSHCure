######################################################################
#
#  Notifications::IODEF.pm
#  Authors: Rick Hofstede <r.j.hofstede@utwente.nl>
#           Luuk Hendriks <luuk.hendriks@utwente.nl>
#  University of Twente, The Netherlands
# 
#  LICENSE TERMS: 3-clause BSD license (outlined in license.html) 
#
######################################################################

package SSHCure::Notifications::IODEF;
use strict;
use warnings;

use POSIX qw(strftime);
use SSHCure::Utils;
use XML::Writer;
use XML::Writer::String; # FIXME Remove

# Example: https://c3isecurity.wordpress.com/2012/06/27/iodef-sci-example/
# Specification: http://www.ietf.org/rfc/rfc5070.txt

sub handle_notification {
    my (undef, $attacker_ip, $attack, $new_targets, $notification_id) = @_;

    # Get name of host running SSHCure
    my $sshcure_host = qx(hostname -f);
    $sshcure_host =~ s/^\s+|\s+\n?$//g;

    # Determine attack IP address version
    my $ip_version = get_ip_version($attacker_ip);

    # Convert attack start time to ISO 8601 timestamp
    my $time_zone = strftime("%z", localtime($$attack{'start_time'}));
    $time_zone =~ s/(\d{2})(\d{2})/$1:$2/;
    my $start_time_iso8601 = strftime("%Y-%m-%dT%H:%M:%S".$time_zone, localtime($$attack{'start_time'}));

    # Convert current time to ISO 8601 timestamp
    my $current_time_iso8601 = strftime("%Y-%m-%dT%H:%M:%S".$time_zone, localtime(time));

    # Generate XML file
    my $output_string = XML::Writer::String->new(); # FIXME Remove
    my $doc = new XML::Writer(OUTPUT => $output_string); # FIXME Remove argument
    $doc->startTag('xml', 'version' => '1.0', encoding => 'UTF-8');
        $doc->startTag('IODEF-Document', 'version' => '1.00', 'lang' => 'en',
                'xmlns' => 'urn:ietf:params:xml:ns:iodef-1.0',
                'xmlns:iodef' => 'urn:ietf:params:xml:ns:iodef-1.0',
                'xmlns:iodef-sci' => 'urn:ietf:params:xml:ns:iodef-sci-1.0',
                'xmlns:xsi' => 'http://www.w3.org/2001/XMLSchema-instance');
            $doc->startTag('Incident', 'purpose' => 'reporting');
                $doc->startTag('IndicentID', 'name' => $$attack{'db_id'});
                    $doc->characters('');
                $doc->endTag();
                $doc->startTag('ReportTime');
                    $doc->characters($current_time_iso8601);
                $doc->endTag();
                $doc->startTag('StartTime');
                    $doc->characters($start_time_iso8601);
                $doc->endTag();

                # Since the attack's end time is updated after every interval (in case the attack is active),
                # we have to check whether the attack has really ended. This is done by the first condition.
                if ($CFG::NOTIFICATIONS{$notification_id}{'when'} eq $CFG::CONST{'NOTIFICATIONS'}{'WHEN'}{'ATTACK_END'} && $$attack{'end_time'} > 0) {
                    my $end_time_iso8601 = strftime("%Y-%m-%dT%H:%M:%S".$time_zone, localtime($$attack{'end_time'}));
                    $doc->startTag('EndTime');
                        $doc->characters($end_time_iso8601);
                    $doc->endTag();
                }

                $doc->startTag('Assessment');

                $doc->endTag();

                $doc->startTag('Contact', 'role' => 'creator', 'type' => 'ext-value', 'ext-type' => 'application');
                    $doc->startTag('ContactName');
                        $doc->characters('SSHCure');
                    $doc->endTag();
                    $doc->startTag('Email');
                        $doc->characters(''); # FIXME
                    $doc->endTag();
                    $doc->startTag('Description');
                        $doc->characters('This report has been generated by SSHCure on $sshcure_host');
                    $doc->endTag();
                $doc->endTag();

                $doc->startTag('EventData');
                    $doc->startTag('Flow');
                        $doc->startTag('System', 'category' => 'source');
                            $doc->startTag('Node');
                                $doc->startTag('Address', 'category' => 'ipv'.${ip_version}.'-addr');
                                    $doc->characters(dec2ip($attacker_ip));
                                $doc->endTag();
                            $doc->endTag();
                        $doc->endTag();
                        $doc->startTag('System', 'category' => 'target');
                            foreach (keys(%$new_targets)) {
                                $doc->startTag('Node');
                                    $doc->startTag('Address', 'category' => 'ipv'.${ip_version}.'-addr');
                                        $doc->characters(dec2ip($_));
                                    $doc->endTag();
                                $doc->endTag();
                            }
                            $doc->startTag('Service', 'ip_protocol' => '6'); # TCP
                                $doc->startTag('Port');
                                    $doc->characters('22'); # SSH port number
                                $doc->endTag();
                            $doc->endTag();
                        $doc->endTag();
                    $doc->endTag();
                $doc->endTag();
            $doc->endTag();
        $doc->endTag();
    $doc->endTag();

    # Perform final checks
    $doc->end();

    log_info("Successfully generated IODEF attack report (attack ID: ".$$attack{'db_id'}.")");

    # log_debug("XML file: ".$output_string->value());
}

1;
